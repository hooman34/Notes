{
  
    
        "post0": {
            "title": "Modeling extreme cases with peaks over threshold - 2",
            "content": "Packages used: extRemes, Rcpp, dplyr . Readings: An introduction to extreme value statistics, An introduction to statistical modeling of extreme values, 극단치이론을 이용한 VaR의 추정과 검증 : 국내 주식시장을 중심으로 . . &emsp;We&#39;ll dive right into the analysis of peaks over threshold, using sample data. As explained before, peaks over threshold method sets a threshold to sort out the data it wants to model. Also, it is a parametric method, meaning that we want to find parameters that would create a distribution that fits the data. &emsp;Below are the characteristics of peaks over threshold: . Follows a Generalized Pareto (GP) distribution | In mathematical terms, $G(y) = 1 - [1 + frac{ xi (y- mu)}{ sigma} ]^{ frac{- 1}{ xi}}$ $ mu$ is the threshold | $ sigma$ is the scale parameter | $ xi$ is the shape parameter | . | . options(warn=0) library(extRemes) library(Rcpp) library(ggplot2) library(dplyr) library(VGAM) library(repr) options(repr.plot.width=10, repr.plot.height=7) . . The GP distribution looks like this: . &emsp;Below is the plot where $ sigma$ changes while $ xi=0$ . x &lt;- seq(-4, 4, length=100) y1 &lt;- dgpd(x) y2 &lt;- dgpd(x, scale=0.5) y3 &lt;- dgpd(x, scale=0.3) y = append(y1, y2) y = append(y, y3) xs = append(x,x) xs = append(xs, x) labels = append(rep_len(&#39;scale=1&#39;, length(x)), rep_len(&#39;scale=0.5&#39;, length(x))) labels = append(labels, rep_len(&#39;scale=0.3&#39;, length(x))) df = data.frame(&#39;values&#39;=unlist(y)) df[&#39;x&#39;] = unlist(xs) df[&#39;labels&#39;] = unlist(labels) ggplot(df, aes(x=x, y=values, color=labels))+geom_line(size=1.5) . . &emsp;Below is the plot where $ xi$ changes while $ sigma=1$ &emsp;If $ xi&lt;0$, it means that this distribution has an upper bound. If $ xi=0$, it becomes $1-exp(- frac{y}{ tilde{ sigma}})$, which is an exponential distribution. It also means that extremes with lesser magnitudes have a higher probability of occurence than would be seen in distributions where $ xi&gt;0$. In other words, distributions with $ xi&gt;0$ would be a better fit for rainfalls at the very right end of the distribution. . x &lt;- seq(-4, 4, length=100) y1 &lt;- dgpd(x, shape=-0.5) y2 &lt;- dgpd(x, shape=0) y3 &lt;- dgpd(x, shape=0.5) y = append(y1, y2) y = append(y, y3) xs = append(x,x) xs = append(xs, x) labels = append(rep_len(&#39;shape=-0.5&#39;, length(x)), rep_len(&#39;shape=0&#39;, length(x))) labels = append(labels, rep_len(&#39;shape=0.5&#39;, length(x))) df = data.frame(&#39;values&#39;=unlist(y)) df[&#39;x&#39;] = unlist(xs) df[&#39;labels&#39;] = unlist(labels) ggplot(df, aes(x=x, y=values, color=labels))+geom_line(size=1.5) . . set.seed(2) sample(10) . &lt;ol class=list-inline&gt;5 | 6 | 9 | 1 | 10 | 7 | 4 | 8 | 3 | 2 | &lt;/ol&gt; How we will choose the threshold . The threshold we want should be between 0.5 year return period and 2year return period. . This threshold is set via expert&#39;s judgement. | . | Now, to get the specific threshold, we will use the method proposed by Embrechts; finding a threshold where the excess mean plot is linear. . Start from the mean of the pareto distribution $E(y)= frac{ sigma}{1- xi}$ where $ xi&lt;1$ | . | We hypothesized that the exceedent of $ mu_{0}$ follows a pareto distribution. Then the mean becomes $E(X- mu_{0}|X&gt; mu_{0})= frac{ sigma_{ mu_{0}}}{1- xi}$ | . | If the data points above threshold $ mu$ follows a pareto distribution, it also means that characteristics of pareto distribution should stand all thresholds above $ mu_0$. $E(X- mu_{0}|X&gt; mu_{0})= frac{ sigma_{ mu}}{1- xi}$ | = $ frac{ sigma_{ mu_{0}}+ xi mu}{1- xi}$ | . | Thus, we could say that $E(X- mu_{0}|X&gt; mu_{0})$ is a linear function of $ mu$. In other words, these estimates are expected to change linearly with $ mu$ when generalized distribution is appropriate. The appropriate threshold then would be the one where the mean residual life plot is approximately linear in $ mu$ | The mean residual life plot draws the mean excess for each threshold. | . | . | Come up with multiple thresholds, and the result could be compared. . | Comparing the results of different thresholds . As the threshold changes the distribution of the output, the VaR value driven by the distribution will also change. Thus, it is CRITICAL to choose a threshold where the result distribution is stable in order to have a reliable result. The concept here would be to simply run all the possible experiments and choose the best parameters. . However, in our case, we do not have a lot of data points, and at the same time, we have a specific target, which is to have a good fitting distribution for the extreme values (perhaps, VaR where the return period is over 250y) . We could see the QQ-plot to see if the result follows the result, but it would not be appropriate for multiple experiments. . Estimating performance (Back-testing) . In order to see if our distribution properly, we would have to compare the returned value from the distribution with the actual data. . Here, the VaR would be the max rainfall in the defined quantile. Var can be derived from the . If the distribution correctly represents the data, the percentage of the rainfall exceeding VaR should be equal to the percentage of the rainfall exceeding 1-q(quantile) of the actual data. . Below is an example of a back-testing result . Left go through the example for quantile 0.999. . Lets say the value for 0.999 quantile of the observational data is $a$. There are 7 observations that goes over $a$. | For GPD distribution where the threshold is 1.7659, lets say the value for 0.999 quantile is $b$. There are 6 observations that goes over $b$ | The GP distribution that is closest to the (1-q) observations would be the most appropriate one. | . * Calculating VaR To calculate the VaR, we start with the GP distribution and the estimated parameters . $ hat F(x) = 1- rate*[1+ frac{ hat xi}{ hat sigma}(x- mu)]^{- frac{1}{ hat xi}}$ . $ mu$ is the threshold | $ sigma$ is the scale parameter | $ xi$ is the shape parameter | $rate= frac{num ;data ;points ;over ;threshold}{num ;data ;points}$ | . Using the calculation above, the VaR would be: $VaR_{q} = mu + frac{ hat sigma}{ hat xi}[ { { frac{1}{rate}(1-q)} }^{- xi} -1]$ where $q&gt;F( mu)$ . - 04. Calculating the retirun period . After fitting the distribution we would be able to convert it into a return period. . The return period would be the inverse of $[1 + frac{ xi (y- mu)}{ sigma} ]^{ frac{- 1}{ xi}}*rate*ndays$, where $rate= frac{num ;data ;points ;over ;threshold}{num ;data ;points}$ . - 05. Applying the loading factor . Once we retrieve the return period and the corresponding rainfall(mm), we could calculate the loading factor. The loading factor would be the percentage between return period from 2c+ simulation and return period from normal simulation. . This loading factor would then be multiplied to the return period derived from Amedas for projection. . . Appendix . Relationship between probability and return period $rp(z,p) = frac{1}{p}$ . Create a vector of return levels fror a specified range of test return periods | Fina the return level with a corresponding return period that most closely matches the desired return period |",
            "url": "https://hooman34.github.io/Notes/extreme%20value%20statistics/peaks%20over%20threshold/statistics/2022/01/30/Modeling_extreme_cases_with_peaks_over_threshold_2.html",
            "relUrl": "/extreme%20value%20statistics/peaks%20over%20threshold/statistics/2022/01/30/Modeling_extreme_cases_with_peaks_over_threshold_2.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Modeling extreme cases with peaks over threshold - 1",
            "content": "Relevant materials: An introduction to extreme value statistics An introduction to statistical modeling of extreme values 극단치이론을 이용한 VaR의 추정과 검증 : 국내 주식시장을 중심으로 FRM: Extreme Value Theory (EVT) - Intro FRM: Three approaches to value at risk (VaR) . . What we want to model . &emsp;Lets say you want to model a rainfall that comes every 250 years. Enough rainfall would lead to floods, and would then lead to damages to the shop owners or vehicle owners. &emsp;There are other extreme events besides rainfall. Those could be a stock market crash or any other events that does not happen a lot, but when it does, would have a huge impact. . How we can model extreme cases . &emsp;Overall, when assessing the value of something, we use a Value At Risk (VAR) methods. There are parametric and non-parametric methods under VAR, and this article focuses on parametric methods. &emsp;&quot;Parametric&quot; means it uses parameters. In other words, we want to come out with a parameter so that the model based on those parameters would appropriately represent the data. . For modeling extreme cases, we could choose between two methods. . Block maxima | Peaks over threshold | &emsp;Both methods aim to fit a distribution to extreme cases, which looks like this: . . &emsp;A normal distribution won&#39;t be a good fit since it doesn&#39;t take much consideration on the far right or left data points. Thus we cut the tail of the distribution. . Block maxima . &emsp;The block maxima method chooses the maximum value for each time span e.g. year. The data points extracted like this tends to follow a GEV (Generalized Extreme Value) distribution. However, the extimated Value At Risk calculated based on this method tends to be unstable according to the specified time span. &emsp;We will focus on a more stable method; peaks over threshold. . . Peaks over threshold . &emsp;As the name mentiones, this methods sets a threshold and tries to fit a distribution for data points that goes over that threshold. . . &emsp;Then it would mean that choosing the right threshold is critical in the process of this method. &emsp;Here are the methods introduced for choosing the appropriate threshold. . Paper Proposed way of setting the threshold . Davison and Smith (1990) / Nefci (2000) | Set it as (standard dev * 1.65) | . Danielsson and de Vires (1997) | Set threshold based on MSE | . Cole S. (2001) | Use mean excess graph and Hill graph | . Massahiro F. and Yasufumi S. (2002) | Value where it divides 4~6% of the total data | . Christoffersen (2003) | Value where it divides 5% of the total data | . Embrechts (2003) | Where the excess mean plot is linear | . &emsp;The hard part of modeling extreme values is that there are only a few data points. This makes it hard to determine which part of the tail we should &#39;cut&#39;. Naturally, it becomes important to find parameters for a distribution that can have stable results with minimal loss. . In the next post, we&#39;ll look into the mathematical details of peaks overthreshold. . .",
            "url": "https://hooman34.github.io/Notes/extreme%20value%20statistics/peaks%20over%20threshold/statistics/2022/01/28/Modeling_extreme_cases_with_peaks_over_threshold.html",
            "relUrl": "/extreme%20value%20statistics/peaks%20over%20threshold/statistics/2022/01/28/Modeling_extreme_cases_with_peaks_over_threshold.html",
            "date": " • Jan 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Portfolio optimization using cvxpy",
            "content": "1. Objective . Would like to know how much investment should go into each stocks, in order to optimize the portfolio. Here, optimization means . expected return exceeds minimum threshold | minimize the risk of the portfolio return | . 2. Components of optimization . 2.1 Decision variable . Matrix X refers to a portion of each individual stock $X = begin{bmatrix} x_1 x_2 x_3 end{bmatrix}$ Here, the constraint is: $X geq0$ . 2.2 Constraints . Budget constraint $e^Tx = 1.0$ where $e=[1,1,1]$ | In other words, the investment portion of each stock should sum up to 1 | . | Expected return constraint We want our expected return of our portfolio to be higher than a certain threshold | $ mathbb E begin{bmatrix} sum_{i=1}^{3} tilde{r}_i x_i end{bmatrix} = sum_{i=1}^{3} mathbb E begin{bmatrix} tilde{r}_i end{bmatrix}x_i = sum_{i=1}^{3} bar{r}_i x_i$ | This could be the same this as $ bar{r}^T X$ which means the sum of multiplication of average return and investment portion | Thus, $ sum_{i=1}^{3} bar{r}_i x_i geq r_{min}$ | $r_{min}$ would be set based on our judgement | . | . 2.3 Objective function . This is the criteria for choosing the best set of decision. . It is to minimize the variance of the portfolio returns $x^TQx$ where $Q$ is a covariance matrix | . | . 2.4 Assumption . It is assumed that the monthly stock returns have a stationary proability distribution. This means that it has a fixed distribution, and this also means that the projections done based on historical data is valid. . 3. Analysis . import pandas as pd import numpy as np from cvxpy import * import pandas_datareader as pdr . 3.1 Read ticker data . It is easy to read ticker data using pandas-datareader . tickers = [&#39;MSFT&#39;, &#39;V&#39;, &#39;WMT&#39;] start_date = &#39;2019-01-02&#39; end_date = &#39;2021-12-31&#39; stock_price = pdr.DataReader(tickers, &#39;yahoo&#39;, start_date, end_date) stock_price.head(3) . Attributes Adj Close Close High Low Open Volume . Symbols MSFT V WMT MSFT V WMT MSFT V WMT MSFT V WMT MSFT V WMT MSFT V WMT . Date . 2019-01-02 97.782417 | 130.463150 | 88.576424 | 101.120003 | 132.919998 | 93.339996 | 101.750000 | 133.740005 | 93.650002 | 98.940002 | 129.600006 | 91.639999 | 99.550003 | 130.000000 | 91.639999 | 35329300.0 | 8788000.0 | 8152700.0 | . 2019-01-03 94.185211 | 125.761711 | 88.120903 | 97.400002 | 128.130005 | 92.860001 | 100.190002 | 131.279999 | 94.709999 | 97.199997 | 127.879997 | 92.699997 | 100.099998 | 131.210007 | 93.209999 | 42579100.0 | 9428300.0 | 8277300.0 | . 2019-01-04 98.565704 | 131.179657 | 88.671318 | 101.930000 | 133.649994 | 93.440002 | 102.510002 | 134.589996 | 93.660004 | 98.930000 | 130.130005 | 92.690002 | 99.720001 | 130.440002 | 93.209999 | 44060600.0 | 11065800.0 | 8029100.0 | . 3.2 Derive monthly return . We&#39;ll just take the close price for each ticker. The monthly return will be used for simplicity. . stock_price = stock_price[[( &#39;Close&#39;, &#39;MSFT&#39;), ( &#39;Close&#39;, &#39;V&#39;), ( &#39;Close&#39;, &#39;WMT&#39;)]] stock_price.columns = [&#39;MSFT&#39;, &#39;V&#39;, &#39;WMT&#39;] stock_price.reset_index(inplace=True) stock_price.head(3) . Date MSFT V WMT . 0 2019-01-02 | 101.120003 | 132.919998 | 93.339996 | . 1 2019-01-03 | 97.400002 | 128.130005 | 92.860001 | . 2 2019-01-04 | 101.930000 | 133.649994 | 93.440002 | . stock_price[&#39;year&#39;] = stock_price.Date.dt.year stock_price[&#39;month&#39;] = stock_price.Date.dt.month stock_price = stock_price.groupby([&#39;year&#39;, &#39;month&#39;]).mean().reset_index(drop=True) stock_price.head(3) . MSFT V WMT . 0 104.135238 | 136.442381 | 95.809047 | . 1 107.927894 | 143.581579 | 97.775263 | . 2 115.133810 | 152.260954 | 98.275714 | . $$stockReturn = frac{price_t-price_{t-1}}{price_{t-1}}$$ . stock_price_shift = stock_price.shift().rename(columns={&quot;MSFT&quot;:&quot;MSFT_sft&quot;, &quot;V&quot;:&quot;V_sft&quot;, &quot;WMT&quot;:&quot;WMT_sft&quot;}) stock_price = pd.concat([stock_price, stock_price_shift[[&#39;MSFT_sft&#39;, &#39;V_sft&#39;, &#39;WMT_sft&#39;]]], axis=1) stock_price.head(3) . MSFT V WMT MSFT_sft V_sft WMT_sft . 0 104.135238 | 136.442381 | 95.809047 | NaN | NaN | NaN | . 1 107.927894 | 143.581579 | 97.775263 | 104.135238 | 136.442381 | 95.809047 | . 2 115.133810 | 152.260954 | 98.275714 | 107.927894 | 143.581579 | 97.775263 | . monthly_returns = pd.DataFrame() for ticker in [&#39;MSFT&#39;, &#39;V&#39;, &#39;WMT&#39;]: returns = (stock_price[ticker] - stock_price[ticker+&#39;_sft&#39;]) / stock_price[ticker+&#39;_sft&#39;] monthly_returns = pd.concat([monthly_returns, pd.DataFrame(returns)], axis=1) # rename the column names monthly_returns.columns = [&#39;MSFT&#39;, &#39;V&#39;, &#39;WMT&#39;] # drop first row since it is not used when calculating stock returns monthly_returns.drop(0, axis=0, inplace=True) monthly_returns.head(3) . MSFT V WMT . 1 0.036420 | 0.052324 | 0.020522 | . 2 0.066766 | 0.060449 | 0.005118 | . 3 0.066540 | 0.050027 | 0.026698 | . 4. Specify the components for optimization . To reiterate, the objective of this analysis is to build a portfolio that has minimum risk. And while there are many ways to represent risk, we will use the variance of the return. . print(&quot;Average monthly return over the two years.&quot;) monthly_returns.mean().reset_index() . Average monthly return over the two years. . index 0 . 0 MSFT | 0.034952 | . 1 V | 0.013684 | . 2 WMT | 0.011622 | . print(&quot;Standard deviation of each stock over two years.&quot;) monthly_returns.std().reset_index() . Standard deviation of each stock over two years. . index 0 . 0 MSFT | 0.049329 | . 1 V | 0.048437 | . 2 WMT | 0.035628 | . Now, in order to utilize cvxpy to optimize the current problem, we would have to specify the components we have identified earlier. . Objective . minimize $x^TQx$ where $Q$ is a covariance matrix (risk) | . Constraints . $X&gt;0$ where X is a portion of budget that goes into each stock | $ sum X=1$ Investment portion of each stock should sum up to 1 | $ sum_{i=1}^{3} bar{r}_i x_i geq r_{min}$ | . For $r_{min}$, lets set it to 2% since Microsoft has the highest monthly average return, and it is 3.5%. Realistically, a portfolio which is a combination of other stocks would have lower average return. . symbols = monthly_returns.columns.to_list() n = len(symbols) x = Variable(n) min_return = 0.02 r = monthly_returns.mean().values # potfolio_return = multiply(r.T, x) potfolio_return = r.T @ x # objective is to minimize risk covariance_matrix = np.asmatrix(np.cov(monthly_returns.values.T)) risk = quad_form(x, covariance_matrix) # set the optimization problem prob = Problem(Minimize(risk), [sum(x) == 1, potfolio_return &gt;= min_return, x &gt;= 0]) . 5. Solve optimization using cvxpy . prob.solve() . 0.0009641333660832668 . print(&quot;Here is the portion of each stock in order to minimize risk while the return is bigger than 2%. n&quot;) for i in range(len(symbols)): print(&quot;{}: {:.2f}%&quot;.format(symbols[i], x.value[i]*100)) print() print(&quot;The volatility of this portfolio is {:.5f}%&quot;.format(risk.value**0.5*100)) print(&quot;The return of this portfolio is {}%&quot;.format(round(potfolio_return.value*100, 0))) . Here is the portion of each stock in order to minimize risk while the return is bigger than 2%. MSFT: 34.33% V: 17.87% WMT: 47.79% The volatility of this portfolio is 3.10505% The return of this portfolio is 2.0% . . You can check out for the official example of csvpy for portfolio optimization here .",
            "url": "https://hooman34.github.io/Notes/optimization/cvxpy/2022/01/13/Portfolio_optimization_using_cvxpy.html",
            "relUrl": "/optimization/cvxpy/2022/01/13/Portfolio_optimization_using_cvxpy.html",
            "date": " • Jan 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hooman34.github.io/Notes/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hooman34.github.io/Notes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hooman34.github.io/Notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hooman34.github.io/Notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}